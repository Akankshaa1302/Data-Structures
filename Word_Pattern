class Solution {
public:
    bool wordPattern(string pattern, string s) {

        vector<string> storestring;
        
        string temp = "";
        for(int i =0;i<s.size();i++){
            
            if(s[i]==' '){
                storestring.push_back(temp);
                temp = "";
            }else{
                temp = temp + s[i];

            }
    
        }
        if(!temp.empty()){
            storestring.push_back(temp);
        }
        if(pattern.size()!=storestring.size()){
            return false;
        }
        unordered_map<char, string> mp1;
        unordered_map<string, char> mp2;
        for(int i =0;i<pattern.size();i++){
            char ch = pattern[i];
            string word = storestring[i];
            if((mp1.find(ch)!=mp1.end() && mp1[ch]!=word) || (mp2.find(word)!=mp2.end() && mp2[word]!=ch)){
                return false;
            }
            mp1[ch]=word;
            mp2[word]=ch;
        }
        return true;

    }
};
